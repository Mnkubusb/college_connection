// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  ADMIN
  USER
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  isFirstLogin  Boolean         @default(true)
  image         String?
  password      String?
  role          UserRole       @default(USER)
  accounts      Account[]
  profile       Profile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model verificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model Profile {
  id            String         @id @default(cuid())
  userId        String         @unique
  name          String    
  image         String?     
  batch         String?
  wannabe       String?
  insta         String?
  linkedin      String?
  github        String?
  twitter       String?
  branch        String?
  bio           String?
  skills        String[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}



model Note {
  id String @id @default(cuid())
  userId String
  title String @db.Text
  imageUrl String?  @db.Text
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  notesList NotesList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category{
  id String @id @default(cuid())
  name String @unique
  notes Note[]
  createdAt DateTime @default(now())
}

model NotesList{
  id String @id @default(cuid())
  userId String
  title String @db.Text
  imageUrl String?  @db.Text
  position Int
  isPublished Boolean @default(false)

  chapters Chapters[]

  noteId String
  note Note @relation(fields: [noteId], references: [id] , onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([noteId])
}

model Chapters {
  id String @id @default(cuid())
  userId String
  title String @db.Text
  fileUrl String?  @db.Text
  position Int

  notesListId String
  notesList NotesList @relation(fields: [notesListId], references: [id] , onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

